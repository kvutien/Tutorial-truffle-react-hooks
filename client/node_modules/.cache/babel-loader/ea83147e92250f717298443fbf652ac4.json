{"ast":null,"code":"var _jsxFileName = \"/Users/kvutien/development/truffle-react-new/client/src/App.js\",\n    _s = $RefreshSig$();\n\n/*\n * Main entry point of a React application\n * version of Truffle \"React\" box adapted to use \"hooks\" instead of classes, starting from React v16\n */\nimport React, { useState, useEffect } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // initialize the state variables of the application\n  const [storageValue, setStorageValue] = useState(undefined);\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [contract, setContract] = useState(undefined); // equivalent to the componentDidMount function of older React frameworks\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // Get network provider (typically MetaMask) and web3 instance\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts from the provider (MetaMask)\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, contract to the state\n\n        setWeb3(web3);\n        setContract(instance);\n        setAccounts(accounts);\n      } catch (error) {\n        // Catch any errors for any of the above operations\n        alert(`Failed to load web3, accounts, or contract. Did you migrate the contract or installed MetaMask? Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    init();\n  }, []); // is called whenever there was any change in the state variables web3, accounts, contract\n\n  useEffect(() => {\n    const runExample = async () => {\n      // example of interaction with the smart contract\n      try {\n        // Stores a given value, 5 by default\n        await contract.methods.set(5).send({\n          from: accounts[0]\n        }); // Get the value from the contract to prove it worked\n\n        const response = await contract.methods.get().call(); // Update state with the result\n\n        setStorageValue(response);\n      } catch {\n        alert('No contract deployed; please check that MetaMask is on the correct network and reload page');\n      }\n    };\n\n    if (typeof web3 != 'undefined' && typeof accounts != 'undefined' && typeof contract != 'undefined') {\n      runExample();\n    }\n  }, [web3, accounts, contract]);\n\n  if (typeof web3 === 'undefined') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Web3, accounts, and contract...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 16\n    }, this);\n  } // equivalent to the render function of older React frameworks\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"App-header\",\n      children: \"Good to Go!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your Truffle-React Box is installed and ready.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Smart Contract Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (initially set).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Try changing the value stored on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"line 56\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 46\n      }, this), \" of \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"App.js\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 74\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"The stored value is: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: storageValue ? storageValue : 'not set yet'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"gxYElnYB5mBQ45HgAoU2vSt7qPA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kvutien/development/truffle-react-new/client/src/App.js"],"names":["React","useState","useEffect","SimpleStorageContract","getWeb3","App","storageValue","setStorageValue","undefined","web3","setWeb3","accounts","setAccounts","contract","setContract","init","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console","runExample","methods","set","send","from","response","get","call"],"mappings":"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","sourcesContent":["/*\n * Main entry point of a React application\n * version of Truffle \"React\" box adapted to use \"hooks\" instead of classes, starting from React v16\n */\nimport React, { useState, useEffect } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nfunction App() {\n    // initialize the state variables of the application\n    const [storageValue, setStorageValue] = useState(undefined);\n    const [web3, setWeb3] = useState(undefined);\n    const [accounts, setAccounts] = useState(undefined);\n    const [contract, setContract] = useState(undefined);\n\n    // equivalent to the componentDidMount function of older React frameworks\n    useEffect( () => {\n        const init = async () => {\n            try {\n                // Get network provider (typically MetaMask) and web3 instance\n                const web3 = await getWeb3();\n\n                // Use web3 to get the user's accounts from the provider (MetaMask)\n                const accounts = await web3.eth.getAccounts();\n\n                // Get the contract instance\n                const networkId = await web3.eth.net.getId();\n                const deployedNetwork = SimpleStorageContract.networks[networkId];\n                const instance = new web3.eth.Contract(\n                    SimpleStorageContract.abi,\n                    deployedNetwork && deployedNetwork.address,\n                );\n                // Set web3, accounts, contract to the state\n                setWeb3(web3);\n                setContract(instance);\n                setAccounts(accounts);\n            } catch (error) {\n                // Catch any errors for any of the above operations\n                alert(\n                    `Failed to load web3, accounts, or contract. Did you migrate the contract or installed MetaMask? Check console for details.`,\n                );\n                console.error(error);\n            }\n        };\n        init();\n    }, []);\n\n    // is called whenever there was any change in the state variables web3, accounts, contract\n    useEffect( () => {\n        const runExample = async () => {\n            // example of interaction with the smart contract\n            try{\n                // Stores a given value, 5 by default\n                await contract.methods.set(5).send({ from: accounts[0] });\n\n                // Get the value from the contract to prove it worked\n                const response = await contract.methods.get().call();\n\n                // Update state with the result\n                setStorageValue (response);\n            }\n            catch{\n                alert('No contract deployed; please check that MetaMask is on the correct network and reload page');\n            }\n        }\n        if(typeof(web3) != 'undefined'\n            && typeof(accounts) != 'undefined'\n            && typeof(contract) != 'undefined'){\n            runExample();\n        }\n    }, [web3, accounts, contract]);\n\n    if (typeof(web3) === 'undefined') {\n        return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    // equivalent to the render function of older React frameworks\n    return (\n        <div className=\"App\">\n        <h1 className=\"App-header\">Good to Go!</h1>\n        <p>Your Truffle-React Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n            If your contracts compiled and migrated successfully, below will show\n            a stored value of 5 (initially set).\n        </p>\n        <p>\n            Try changing the value stored on <strong>line 56</strong> of <code>App.js</code>.\n        </p>\n        <div>The stored value is: <strong>{(storageValue)? storageValue: 'not set yet'}</strong></div>\n        </div>\n    );\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}